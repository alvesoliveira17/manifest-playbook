apiVersion: v1
items:
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: {{ item.value.app }}
    name: {{ item.value.app }}
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: {{ item.value.app }}
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: {{ item.value.app }}
      spec:
        containers:
        - envFrom:
{% for configmap in item.value.configmap %}
          - configMapRef:
              name: {{ configmap.name }}
              optional: false
{% endfor %}
          image: registry.gitlab.com/semantix/semantix-manager-api-account:prod
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - cat
              - /nope
            failureThreshold: 1
            initialDelaySeconds: 600
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 2
          name: {{ item.value.app }}
          ports:
          - containerPort: 5000
            name: 5000tcp02
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 2
            successThreshold: 2
            tcpSocket:
              port: 5000
            timeoutSeconds: 2
        imagePullSecrets:
        - name: dc-rhzfs
        restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ item.value.app }}
  name: {{ item.value.app }}
spec:
  ports:
  - name: 5000tcp02
    port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    app: {{ item.value.app }}
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: '"Access-Control-Allow-Headers,
      Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method,
      Access-Control-Request-Headers"'
    nginx.ingress.kubernetes.io/cors-allow-methods: '"PUT, GET, POST, DELETE, OPTIONS,
      PATCH, HEAD"'
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
  name: {{ item.value.app }}
spec:
  rules:
  - host:
    http:
      paths:
{% for location in item.value.ingress %}
      - backend:
          serviceName: {{ item.value.app }}
          servicePort: {{ item.value.port }}
        path: {{ location.path }}
{% endfor %}